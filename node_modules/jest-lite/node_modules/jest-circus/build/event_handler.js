'use strict';Object.defineProperty(exports, "__esModule", { value: true });










var _utils = require('./utils');

// To pass this value from Runtime object to state we need to use global[sym]
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */const TEST_TIMEOUT_SYMBOL = Symbol.for('TEST_TIMEOUT_SYMBOL');const handler = (event, state) => {switch (event.name) {case 'hook_start':{break;}case 'start_describe_definition':{const
        blockName = event.blockName,mode = event.mode;const
        currentDescribeBlock = state.currentDescribeBlock;
        const describeBlock = (0, _utils.makeDescribe)(blockName, currentDescribeBlock, mode);
        currentDescribeBlock.children.push(describeBlock);
        state.currentDescribeBlock = describeBlock;
        break;
      }
    case 'finish_describe_definition':{const
        currentDescribeBlock = state.currentDescribeBlock;
        if (!currentDescribeBlock) {
          throw new Error(
          `"currentDescribeBlock" has to be there since we're finishing its definition.`);

        }
        if (currentDescribeBlock.parent) {
          state.currentDescribeBlock = currentDescribeBlock.parent;
        }
        break;
      }
    case 'add_hook':{const
        currentDescribeBlock = state.currentDescribeBlock;const
        fn = event.fn,type = event.hookType;
        currentDescribeBlock.hooks.push({ fn, type });
        break;
      }
    case 'add_test':{const
        currentDescribeBlock = state.currentDescribeBlock;const
        fn = event.fn,mode = event.mode,name = event.testName;
        const test = (0, _utils.makeTest)(fn, mode, name, currentDescribeBlock);
        test.mode === 'only' && (state.hasFocusedTests = true);
        currentDescribeBlock.tests.push(test);
        break;
      }
    case 'test_start':{
        event.test.startedAt = Date.now();
        break;
      }
    case 'test_skip':{
        event.test.status = 'skip';
        break;
      }
    case 'test_failure':{
        event.test.status = 'fail';
        event.test.duration = (0, _utils.getTestDuration)(event.test);
        event.test.errors.push(event.error);
        break;
      }
    case 'test_success':{
        event.test.status = 'pass';
        event.test.duration = (0, _utils.getTestDuration)(event.test);
        break;
      }
    case 'run_start':{
        global[TEST_TIMEOUT_SYMBOL] && (
        state.testTimeout = global[TEST_TIMEOUT_SYMBOL]);
        break;
      }}

};exports.default =

handler;